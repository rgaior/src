#ifndef __CHANNELDATA_H__
#define __CHANNELDATA_H__

#include <TObject.h>
#include <TVector3.h>

#include <vector>


class ChannelData : public TObject {

public:

  ChannelData(size_t antennaId = 0);

  // Channel id
  size_t GetId() const {return fChannelId;}
  void SetId(size_t id);

  // Data trace
  bool HasDataTrace() const {return !fDataTrace.empty();}
  void MakeDataTrace(double startTime, double binWidth, size_t nBins);
  std::vector<Double_t>& GetDataTrace() {return fDataTrace;}
  const std::vector<Double_t>& GetDataTrace() const {return fDataTrace;}
  double GetDataBinWidth() const {return fDataBinWidth;}
  size_t GetDataBinCount() const {return fDataTrace.size();}
  double GetDataStartTime() const {return fDataStartTime;}
  void SetDataStartTime(double startTime) {fDataStartTime = startTime;}

  // Simulation traces
  bool HasSimulationTraces() const {return !fSimulatedFluxTrace.empty();}
  void MakeSimulationTraces(double startTime, double binWidth, size_t nBins);
  std::vector<Double_t>& GetSimulatedFluxTrace() {return fSimulatedFluxTrace;}
  std::vector<Double_t>& GetSimulatedPowerTrace() {return fSimulatedPowerTrace;}
  const std::vector<Double_t>&
    GetSimulatedFluxTrace() const {return fSimulatedFluxTrace;}
  const std::vector<Double_t>&
    GetSimulatedPowerTrace() const {return fSimulatedPowerTrace;}
  double GetSimulationBinWidth() const {return fSimulationBinWidth;}
  size_t GetSimulationBinCount() const {return fSimulatedFluxTrace.size();}
  double GetSimulationStartTime() const {return fSimulationStartTime;}

  void ObserveEmission(double energy,
                       double t1,
                       double t2,
                       const TVector3 r1,
                       const TVector3 r2);


private:

  // Antenna and channel ids
  UInt_t fAntennaId;
  UInt_t fChannelId;

  // Data trace
  std::vector<Double_t> fDataTrace;  // digitised voltage
  Double_t fDataStartTime;
  Double_t fDataBinWidth;

  // Simulation traces
  std::vector<Double_t> fSimulatedFluxTrace; // spectral irradiance at receiver
  std::vector<Double_t> fSimulatedPowerTrace;  // received power
  Double_t fSimulationStartTime;
  Double_t fSimulationBinWidth;

  void AddToSimulatedFluxTrace(int bin, double flux);
  void AddToSimulatedPowerTrace(int bin, double power);

  ClassDef(ChannelData, 1);

};

#endif
