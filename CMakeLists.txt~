cmake_minimum_required(VERSION 2.8.3)

IF (DEFINED ENV{MBR_INSTALL})
  SET (CMAKE_INSTALL_PREFIX $ENV{MBR_INSTALL} CACHE PATH "install dir" FORCE)
ELSE (DEFINED ENV{MBR_INSTALL})
  MESSAGE (FATAL_ERROR "Please define MBR_INSTALL")
ENDIF  (DEFINED ENV{MBR_INSTALL})

MESSAGE (${CMAKE_INSTALL_PREFIX})


if (CMAKE_HOST_APPLE)
  set (PLATFORM_LD_LIBRARY_PATH "DYLD_LIBRARY_PATH")
  set (CMAKE_PREFIX_PATH "/opt/local")
else (CMAKE_HOST_APPLE)
  SET (PLATFORM_LD_LIBRARY_PATH "LD_LIBRARY_PATH")
endif (CMAKE_HOST_APPLE)
# # Mac OS support
if (CMAKE_HOST_APPLE)
  set (PLATFORM_LD_LIBRARY_PATH "DYLD_LIBRARY_PATH")
  set (CMAKE_SHARED_LINKER_FLAGS "-undefined dynamic_lookup")
# else (CMAKE_HOST_APPLE)
#   SET (PLATFORM_LD_LIBRARY_PATH "LD_LIBRARY_PATH")
endif (CMAKE_HOST_APPLE)

PROJECT(MicroWave CXX)

SET (CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMakeModules)
INCLUDE (UtilityMacros)

FIND_PACKAGE(Root REQUIRED)
FIND_PACKAGE(FFTW3 REQUIRED)
FIND_PACKAGE(Boost REQUIRED)
#FIND_PACKAGE(GRASP)

INCLUDE_DIRECTORIES(${ROOT_INCLUDE_DIR}
                    ${Boost_INCLUDE_DIRS})

# some variants of compiler flags
SET (CMAKE_CXX_FLAGS_DEBUG
     "-Wall -Wextra -Wno-format -pedantic -Wshadow -ggdb3 -O0 -fno-inline -pipe")
SET (CMAKE_CXX_FLAGS_RELEASE
     "-Wall -Wextra -Wno-format -pedantic -Wshadow -O2 -pipe")
SET (CMAKE_CXX_FLAGS_STANDARD
     "-Wall -Wextra -Wno-format -pedantic -Wshadow -O2 -g")

# set the compiler flags
#SET (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_STANDARD})
SET (CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS_DEBUG})
#SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_HAVEGRASP_=${HAVE_GRASP}")

# Mac OS support
 if (CMAKE_HOST_APPLE)
   SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -undefined dynamic_lookup")
 endif (CMAKE_HOST_APPLE)

# if (!CMAKE_HOST_APPLE)
#   SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++0x")
# endif (!CMAKE_HOST_APPLE)

# Enable CTest support for all subdirectories
enable_testing()

SET(UTILITIES_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Utilities/src)
SET(TINYXML_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Externals/tinyxml)
SET(GTEST_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Externals/gtest/include)
SET(DETECTOR_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Detector/src)
SET(SIMULATION_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Simulation/src)
SET(EVENT_INCLUDE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/Event/src)

ADD_SUBDIRECTORY (Externals)
ADD_SUBDIRECTORY (Utilities)
ADD_SUBDIRECTORY (Detector)
ADD_SUBDIRECTORY (Event)
#ADD_SUBDIRECTORY (EventDisplay)
ADD_SUBDIRECTORY (Simulation)
ADD_SUBDIRECTORY (Examples)
#ADD_SUBDIRECTORY (PythonInterface)
